worker_processes 1;
daemon off;

error_log <%= ENV["APP_ROOT"] %>/nginx/logs/error.log;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log <%= ENV["APP_ROOT"] %>/nginx/logs/access.log cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  sendfile on;

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - <%= ENV["PORT"] %>
  server_tokens off;

  server {
    listen <%= ENV["PORT"] %>;
    server_name localhost;
    root <%= ENV["APP_ROOT"] %>/public;
    index index.html index.htm Default.htm;

    # Disables caching for manifest, appcache, html, xml and json. This ensures that invalid APM
    # session cookies are properly expired by the browser on the first request.
    #
    # Fixes an issue where APM would fail to force authentication on invalid sessions in the
    # following scenario:
    # 1. Navigate to, for example, https://sample.apps.wwt.com and log in
    # 2. Completely exit out of your browser
    # 3. Reopen the browser and navigate to https://sample.apps.wwt.com
    # 4. At this point you will not be challenged to authenticate and an invalid APM session cookie
    #    will be sent to all background API calls causing application failure.
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
      expires -1;
    }

    # Default configuration from https://github.com/cloudfoundry/staticfile-buildpack/blob/master/conf/nginx.conf
    location / {

      # Enables HTML5 push state - comment out the following 3 lines to disable
      if (!-e $request_filename) {
        rewrite ^(.*)$ / break;
      }

      <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
        autoindex on;
      <% end %>
      <% if File.exists?(auth_file = File.join(ENV["APP_ROOT"], "nginx/conf/.htpasswd")) %>
        auth_basic "Restricted";                                #For Basic Auth
        auth_basic_user_file <%= auth_file %>;  #For Basic Auth
      <% end %>
      <% if ENV["FORCE_HTTPS"] %>
        if ($http_x_forwarded_proto != "https") {
          return 301 https://$host$request_uri;
        }
      <% end %>
      <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_ssi")) %>
        ssi on;
      <% end %>
    }
  }
}

